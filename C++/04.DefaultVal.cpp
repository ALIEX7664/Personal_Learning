#include<iostream>
using namespace std;
//带默认参数的函数
//void func(int n, float b = 1.2, char c = '@'){
//	cout << n << ", " << b << ", " << c << endl;
//}
//int main(){
//	////为所有参数传值
//	//func(10, 3.5, '#');
//	////为n、b传值，相当于调用func(20, 9.8, '@')
//	//func(20, 9.8);
//	////只为n传值，相当于调用func(30, 1.2, '@')
//	//func(30);
//	//return 0;
//
//	////默认参数除了使用数值常量指定，也可以使用表达式指定
//	//float d = 10.8;
//	//void func(int n, float b = d + 2.9, char c = '@'){
//	//	cout << n << ", " << b << ", " << c << endl;
//
//	
//}

//C++规定，默认参数只能放在形参列表的最后，而且一旦为某个形参指定了默认值，那么它后面的所有形参都必须有默认值。即从第一个默认值开始，右边都必须指名默认值
//
////下面的写法是正确的：
//void func(int a, int b = 10, int c = 20){ }
//void func(int a, int b, int c = 20){ }
//但这样写不可以：	
//void func(int a, int b = 10, int c = 20, int d){ }
//void func(int a, int b = 10, int c, int d = 20){ }


//C++ 规定，在给定的作用域中只能指定一次默认参数。即同一文件不能有函数声明和函数定义的参数都用上默认参数，只能有一次，而将声明和定义放在两个文件里则可以
//C++调用的是当前作用域（有main函数）的默认构造函数，不管默认值相同或者不同

//C语言有四种作用域，
//分别是函数原型作用域、局部作用域（函数作用域）、块作用域、文件作用域（全局作用域），
//C++ 也有这几种作用域。


//不过有一点需要注意，在给定的作用域中一个形参只能被赋予一次默认参数。
//换句话说，函数的后续声明只能为之前那些没有默认值的形参添加默认值，
//而且该形参右侧的所有形参必须都有默认值。
//多次声明同一个函数（当前C++已不能使用！！！）

//void func(int a, int b, int c = 36);
//void func(int a, int b = 5, int c);
//
//int main(){
//	func(99);
//	return 0;
//}